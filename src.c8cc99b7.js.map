{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAqHA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA3GA,IAAMA,EAAQ,SAAAC,GAEL,OAAA,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTD,EAAQF,IACPA,MAIDI,EAAU,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,SAGpBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC3BC,IAAAA,EAAeF,EAASG,IAAI,SAAAC,GAChCA,OAAAA,EAAKP,OAASI,EAAgBG,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCN,QAASM,EAAKN,SAAWM,IAGxDhB,OAAAA,QAAQC,QAAQa,IAQnBG,EAAU,SAAAH,GAAgBT,OAAAA,QAAQa,MAAMJ,IAW9CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAOnC,IAAME,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACjB5B,IAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,SAACC,EAAS0B,GACrBC,IAAAA,EAAaN,KAAKE,SAAW,GACnCtB,WAAW,WACL0B,GACF3B,EAAQ,CAAE4B,GAAIH,EAAYG,GAAIzB,KAAMN,IAEtC6B,EAAOD,EAAYG,KAClB/B,MAIDgC,EAAa,SAAkB,GAAfD,IAAAA,EAAAA,EAAAA,GAAIzB,EAAAA,EAAAA,KACxBC,QAAQC,IAAmBuB,eAAAA,OAAAA,EAAmBzB,kBAAAA,OAAAA,EAA9C,SAGI2B,EAAW,SAAAF,GACfxB,QAAQ2B,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAaFJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH","file":"src.c8cc99b7.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" \n// через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - во миллисекунд\n// которое передали во время вызова функции delay.\n\n// const delay = ms => {\n//     console.log(ms)\n//     return Promise.resolve(setTimeout(() => ms, ms));   \n// };\n\nconst delay = ms => {\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  })\n};\n\nconst logger1 = time => console.log(`Resolved after ${time} ms`);\n\n// // Вызовы функции для проверки\ndelay(2000).then(logger1); // Resolved after 2000ms\ndelay(1000).then(logger1); // Resolved after 1000ms\ndelay(1500).then(logger1); // Resolved after 1500ms\n\n// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\n//     а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  return Promise.resolve(updatedUsers);\n\n  // return new Promise((resolve, reject) => {\n  //     resolve(updatedUsers);        \n  //     reject('erro')    \n  // })\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// // toggleUserState(users, 'Mango', logger2);\n// // toggleUserState(users, 'Lux', logger2);\n\n// /*\n//  * Должно работать так\n//  */\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n\n// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции\n// onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n    setTimeout(() => {\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n//  */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}